Config maps and secrets:
------------------------
I will encode passwords --> base64

Naresh#240  --> encrypt password  --> azvsdsgfdghfdsdgfads


---
apiVersion: apps/v1
kind: Deployment  
metadata:
  name: mysql  
  labels:         
    app: mysql
spec:
  replicas: 1
  selector:
    matchLabels:        
      app: mysql
  template:       
    metadata:
      labels:   
        app: mysql
    spec:                         
      containers:
      - image: mysql:5.6      
        name: mysql
        env:                     
        - name: MYSQL_ROOT_PASSWORD 
          value: Naresh#240
        - name: MYSQL_DATABASE
          value: mysqldb
        - name: MYSQL_USER
          value: naresh240
        - name: MYSQL_PASSWORD
          value: Naresh#240
        ports:
        - containerPort: 3306          
          name: mysql
		  
Configmaps & Secrets:
----------------------
Any sensitive information, if you want to secure we can pass values through secrets
Other than this sensitive information, we can pass through configmaps

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-configmap
data:
  username: naresh
  database: mysqldb

---
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secrets
type: Opaque
data: 
  password: TmFyZXNoIzI0MA==

  
---
apiVersion: apps/v1
kind: Deployment  
metadata:
  name: mysql  
  labels:         
    app: mysql
spec:
  replicas: 1
  selector:
    matchLabels:        
      app: mysql
  template:       
    metadata:
      labels:   
        app: mysql
    spec:                         
      containers:
      - image: mysql:5.6      
        name: mysql
        env:                     
        - name: MYSQL_ROOT_PASSWORD 
          valueFrom:
            secretKeyRef:
              name: mysql-secrets
              key: password
        - name: MYSQL_DATABASE
          valueFrom:
            configMapKeyRef:
              name: mysql-configmap
              key: database
        - name: MYSQL_USER
          valueFrom:
            configMapKeyRef:
              name: mysql-configmap
              key: username
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secrets
              key: password
        ports:
        - containerPort: 3306          
          name: mysql  
		  

echo -n "Naresh#240" | base64		  

kubectl describe mysql-7dbd8b697f-rr7wt
kubectl logs mysql-7dbd8b697f-rr7wt

How to monitor kubernates cluster with k9s:
-------------------------------------------
echo "**** Install k9s *****"

export VERSION_K9S=v0.25.18
curl -LO https://github.com/derailed/k9s/releases/download/${VERSION_K9S}/k9s_Linux_x86_64.tar.gz
tar -xzvf k9s_Linux_x86_64.tar.gz
chmod +x k9s
mv k9s /usr/bin


k9s -A		--> details from all namespaces

if you want to see deployments  --> shift + :  --> deployment
if you want to see service  	--> shift + :  --> service


Default namespaces in kubernetes
---------------------------------
1. default 
2. kube-node-lease
3. kube-public
4. kube-system


kubectl create namespace <namespace-name>
kubectl get namespace

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  namespace: nginx
  labels:
    app: nginx
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.14.2
        ports:
        - containerPort: 80
		
kubectl get pods -n <namespace-name>
kubectl get deploy -n <namespace-name>	

kubectl get pods -n nginx	
kubectl get deploy -n nginx