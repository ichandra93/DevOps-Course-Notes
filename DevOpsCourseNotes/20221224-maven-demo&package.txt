Apache Maven:
-------------
Plan		
Code		--> Source Code Management (github/gitlab/code commit/azure repo/bitbucket)
Build
Test
Release
Deploy
Operate
Monitor

Build:
------
Springboot (java)	--> maven/gradle
Nodejs				--> npm
Python				--> python
Golang				--> go
Angular/React		--> npm

Maven Lifecycle:
----------------
The default lifecycle handles your project deployment
The clean lifecycle handles project cleaning
The site lifecycle handles the creation of your project's web site.


Default lifecycle having 7 phases:
-----------------------------------
validate 
	- validate the project is correct and all necessary information is available
compile 
	- compile the source code of the project
test 
	- test the compiled source code using a suitable unit testing framework. These tests should not require the code be packaged or deployed
package 
	- take the compiled code and package it in its distributable format, such as a JAR.
verify 
	- run any checks on results of integration tests to ensure quality criteria are met
install 
	- install the package into the local repository, for use as a dependency in other projects locally
deploy 
	- done in the build environment, copies the final package to the remote repository for sharing with other developers and projects.


application + database
	--> we need add some dependencies and plugins

3 types of repositories:
------------------------
Local repository			--> ~/.m2/repository
Central/public repository
Remote/private repository   --> nexus/jfrog


pom.xml --> project object model
		--> all dependencies
		--> plugins

maven with tar file:
--------------------
	- java  (pre-requisite)
		yum install java-1.8.0-openjdk -y
		
cd /opt

1. Download tar file
2. extract tar file
3. We need to set environment variables


wget https://dlcdn.apache.org/maven/maven-3/3.8.6/binaries/apache-maven-3.8.6-bin.tar.gz
tar xvf apache-maven-3.8.6-bin.tar.gz
export PATH=$PATH:/opt/apache-maven-3.8.6/bin
mvn -version

mvn validate
mvn compile
mvn test
mvn package
mvn verify
mvn install
mvn deploy


we have to run commands where pom.xml is exist

yum install java-1.8.0-openjdk-devel -y			--> Install JRE


mavewebappdemo-2.0.0-SNAPSHOT.war

	<artifactId>mavewebappdemo</artifactId>
	<packaging>war</packaging>
	<version>2.0.0-SNAPSHOT</version>

<artifactId>-<version>.<packaging>

        <artifactId>mavewebappdemo</artifactId>
        <packaging>war</packaging>
        <version>2.1.0-SNAPSHOT</version>
		
	mavewebappdemo-2.1.0-SNAPSHOT.war
	
mvn clean  --> it will delete target directory


developer --> build  --> jar
developer done some changes	--> build

springboot application will be run with port 8080

java -jar gs-spring-boot-0.1.0.jar

Deploy on EC2:
--------------
	java -jar <jarfile>

we need to open port in security group

output:
--------
	<ip>:<port>