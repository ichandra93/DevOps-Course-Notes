Terraform:
----------
Terraform is an open-source infrastructure as code software tool that enables you to safely and predictably create, change, and improve infrastructure.

Install:
--------
download zip
extract zip
set environment variable

provider "aws" {
  region = "us-east-1"
}

provider "google" {
  project = "acme-app"
  region  = "us-central1"
}

provider "azurerm" {

}

provider "kubernetes" {

}

---------------------------------------------------

Authentication and Configuration
---------------------------------
Parameters in the provider configuration
Environment variables
Shared credentials files
Shared configuration files
Container credentials
Instance profile credentials and region

provider "aws" {
  region     = "us-east-1"
  access_key = "AKIAQQUZ5PMWMHQIARJH"
  secret_key = "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"  
}

terraform init
terraform plan
terraform apply


terraform init -upgrade
terraform init -reconfigure


resource "aws_instance" "example" {
  ami           = data.aws_ami.ubuntu.id
  instance_type = "t3.micro"

  tags = {
    Name = "HelloWorld"
  }
}

ec2 instance_type
	- amiid
	- instance type
	- security group
	
security group	--> resource (example-sg)
ec2 instance	--> resource (example-instance)
						aws_security_group.example-sg
						

aws_instance.example.public_ip

terraform destroy		--> to destroy resources 

------------------------------------------------------------------------
provider "aws" {
  region     = "us-east-1"
  access_key = "AKIAQQUZ5PMWMHQIARJH"
  secret_key = "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"  
}

terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 4.0"
    }  
  }
}

resource "aws_instance" "example" {
  ami           = "ami-0b5eea76982371e91"
  instance_type = "t2.micro"

  tags = {
    Name = "HelloWorld"
  }
}
-------------------------------------------------------------------
Terraform 3 types of variables are there:
-----------------------------------------
1. Local variable
2. Input variable
3. Output variable
C:\Users\Sai\Downloads\classes\practice\aws9pm\terraform\20230121\providers.tf
Input variable:
----------------
variable "ami_id" {
  type    = string
  default = "us-east-1"
}


type Constraints: 
	string 
	list(type)
	map
	count
	bool
	number
	object{attr_name=type}
	

--------------------------------------------
provider "aws" {
  region     = var.region
  access_key = "AKIAQQUZ5PMWMHQIARJH"
  secret_key = "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"  
}

terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 4.0"
    }  
  }
}

resource "aws_instance" "example" {
  ami           = var.ami_id
  instance_type = var.inst_type

  tags = {
    Name = "HelloWorld"
  }
}

variable "ami_id" {
  type    = string
  default = "ami-0b5eea76982371e91"
}

variable "inst_type" {
  type    = string
  default = "t2.micro"
}

variable "region" {
  type    = string
  default = "us-east-1"
}

terraform init
terraform plan
terraform apply -auto-approve
terraform destroy -auto-approve

###############################################################

count	= 2  --> it will create two resources

list(string)
--------------
variable "" {
  type    = list(string)
  default = ['','']
}

-----------------------------------------
resource "aws_instance" "example" {
  ami           = var.ami_id
  instance_type = var.inst_type
  count         = 2
  availability_zone = element(var.availability_zone, count.index)

  tags = {
    Name = "HelloWorld"
  }
}

variable "ami_id" {
  type    = string
  default = "ami-0b5eea76982371e91"
}

variable "inst_type" {
  type    = string
  default = "t2.micro"
}

variable "region" {
  type    = string
  default = "us-east-1"
}

variable "availability_zone" {
  type    = list(string)
  default = ["us-east-1a","us-east-1b"]
}

---------------------------------------------------
length function:
------------------
resource "aws_instance" "example" {
  count = length(var.availability_zone)

  ami               = var.ami_id
  instance_type     = var.inst_type
  availability_zone = element(var.availability_zone, count.index)

  tags = {
    Name = "HelloWorld-${count.index}"
  }
}

variable "ami_id" {
  type    = string
  default = "ami-0b5eea76982371e91"
}

variable "inst_type" {
  type    = string
  default = "t2.micro"
}

variable "region" {
  type    = string
  default = "us-east-1"
}

variable "availability_zone" {
  type    = list(string)
  default = ["us-east-1a","us-east-1b","us-east-1c"]
}

------------------------------------------------------------
Output Values:
--------------
output "public_ip" {
  value = aws_instance.example.*.public_ip
}

(or )

output "public_ip" {
  value = aws_instance.example[*].public_ip
}

Map variable type:
-------------------

resource "aws_instance" "example" {
  count = length(var.availability_zone)

  ami               = lookup(var.ami_id, var.region)
  instance_type     = var.inst_type
  availability_zone = element(var.availability_zone, count.index)

  tags = {
    Name = "HelloWorld-${count.index}"
  }
}

variable "ami_id" {
  type    = map
  default = {
    "us-east-1" = "ami-0b5eea76982371e91"
    "us-east-2" = "ami-0a606d8395a538502"
  }
}

variable "inst_type" {
  type    = string
  default = "t2.micro"
}

variable "region" {
  type    = string
  default = "us-east-2"
}

variable "availability_zone" {
  type    = list(string)
  default = ["us-east-1a","us-east-1b"]
}
